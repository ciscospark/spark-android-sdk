apply plugin: 'com.android.library'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'maven-publish'
apply plugin: 'com.github.dcendents.android-maven'
apply plugin: 'jacoco'

ext {
	moduleName = 'Cisco Spark Android SDK'

	moduleGroupId = 'com.ciscospark'
	moduleArtifactId = 'androidsdk'
	moduleVersion = '0.2.0'

	moduleDescription = 'Cisco Spark SDK for Android'

	moduleSiteUrl = 'https://developer.ciscospark.com/getting-started.html'
	moduleProjectUrl = 'https://github.com/ciscospark/spark-android-sdk'
	moduleGitUrl = 'https://github.com/ciscospark/spark-android-sdk/tree/master'
	moduleConnectionUrl = 'scm:git:git://github.com/ciscospark/spark-android-sdk.git'
	moduleDeveloperConnectionUrl = 'scm:git:ssh://github.com:ciscospark/spark-android-sdk.git'

	moduleLicenseName = 'MIT License'
	moduleLicenseURL = 'https://raw.githubusercontent.com/ciscospark/spark-android-sdk/master/LICENSE'
	moduleDeveloperId = 'devsupport'
	moduleDeveloperName = 'Cisco Spark for Developer'
	moduleDeveloperEmail = 'devsupport@ciscospark.com'
	moduleDeveloperOrganization = 'Cisco System Inc'
	moduleDeveloperOrganizationURL = 'https://www.ciscospark.com/'
	mavenUser = project.hasProperty('mavenUser') ? project.getProperty('mavenUser') : ''
	mavenPass = project.hasProperty('mavenPass') ? project.getProperty('mavenPass') : ''
}

jacoco {
	toolVersion = "0.7.5+"
}

task jacocoTestReport(type:JacocoReport, dependsOn: "testDebugUnitTest") {
	group = "Reporting"
	description = "Generate Jacoco coverage reports"

	classDirectories = fileTree(
			dir: '../sdk/build/intermediates/classes/debug',
			excludes: ['**/R.class',
					   '**/R$*.class',
					   '**/*$ViewInjector*.*',
					   '**/BuildConfig.*',
					   '**/Manifest*.*']
	)

	def coverageSourceDirs = [ '../sdk/src/main/java' ]
	additionalSourceDirs = files(coverageSourceDirs)
	sourceDirectories = files(coverageSourceDirs)
	executionData = files('../sdk/build/jacoco/testDebugUnitTest.exec')

	reports {
		xml.enabled = true
		html.enabled = true
	}
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 25
        testInstrumentationRunner "com.ciscospark.androidsdk.SparkTestRunner"
        multiDexEnabled true
	    versionName moduleVersion
	    buildConfigField "String", "BUILD_TIME", "\"${buildTime()}\""
	    buildConfigField "String", "BUILD_REVISION", "\"${revision()}\""
    }

    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }

    buildTypes {
        release {
			minifyEnabled true
        }
        debug {
            testCoverageEnabled true
        }
    }

    dexOptions {
        preDexLibraries = false
        javaMaxHeapSize "4g"
        dexInProcess false
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    testOptions {
        unitTests.all {
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen {false}
                showStandardStreams = true
            }
        }
    }

    splits {
        abi {
            enable true
            reset()
            include 'armeabi-v7a'
            universalApk false
        }
    }

	if (JavaVersion.current().isJava8Compatible()) {
		tasks.withType(Javadoc) {
			options.addStringOption('Xdoclint:none', '-quiet')
		}
	}
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId moduleGroupId
            artifactId moduleArtifactId
            version moduleVersion
            artifact "$buildDir/outputs/aar/sdk-debug.aar" //aar artifact you want to publish

			artifact javadocJar
			artifact sourcesJar

            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.compile.allDependencies.each { dependency ->
                    if (dependency.group?.trim()) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dependency.group)
                        dependencyNode.appendNode('artifactId', dependency.name)
                        dependencyNode.appendNode('version', dependency.version)
                        if (!dependency.transitive || dependency.name == 'common-lib') {
                            dependencyNode.appendNode('type', 'aar')
                        }
                    }
                }
	            asNode().children().last() + {
		            resolveStrategy = Closure.DELEGATE_FIRST
		            name moduleName
		            description moduleDescription
		            url moduleSiteUrl
		            scm {
			            url moduleGitUrl
			            connection moduleConnectionUrl
			            developerConnection moduleDeveloperConnectionUrl
		            }
		            licenses {
			            license {
				            name moduleLicenseName
				            url moduleLicenseURL
			            }
		            }
		            developers {
			            developer {
				            id moduleDeveloperId
				            name moduleDeveloperName
				            email moduleDeveloperEmail
				            organization moduleDeveloperOrganization
				            organizationUrl moduleDeveloperOrganizationURL
			            }
		            }
	            }
            }
        }
    }

	repositories{
		maven {
			name 'DevSnapshot'
			url "http://engci-maven.cisco.com/artifactory/sparksdk-SNAPSHOT/"
			credentials {
				username project.mavenUser
				password project.mavenPass
			}
		}

		maven {
			name 'Release'
			url "http://engci-maven.cisco.com/artifactory/sparksdk/"
			credentials {
				username project.mavenUser
				password project.mavenPass
			}
		}
	}
}

dependencies {
	compile fileTree(dir: 'libs', include: ['*.jar'])
    provided 'com.squareup.dagger:dagger-compiler:1.2.5'
    compile('com.cisco.spark.android:common-lib:2.0.4055@aar', {
        transitive = true
    })
    testCompile 'com.squareup.okhttp3:okhttp:3.9.0'
	testCompile 'com.squareup.okhttp3:mockwebserver:3.9.0'
	testCompile 'junit:junit:4.12'
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
}

static def buildTime() {
	return new Date().format("yyyy_MM_dd_HH_mm_ss")
}

def revision() {
	def code = new ByteArrayOutputStream()
	exec {
		commandLine 'git', 'rev-parse', '--short', 'HEAD'
		standardOutput = code
	}
	return code.toString().replaceAll("\n", "")
}

task sourcesJar(type: Jar) {
	classifier = 'sources'
	from android.sourceSets.main.java.srcDirs
}

task javadoc(type: Javadoc) {
	classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
	android.libraryVariants.all { variant ->
		description "Generates Javadoc for $variant.name."
		ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
		owner.classpath += files(variant.javaCompiler.classpath.files) + files(ext.androidJar)
	}
	source = android.sourceSets.main.java.srcDirs
	options.encoding('UTF-8')
	options.setUse(true)
	options.author(true)
	options.version(true)
	options.windowTitle(moduleName + ' ' + moduleVersion)
	options.docTitle(moduleName + ' ' + moduleVersion)
	options.links("http://docs.oracle.com/javase/7/docs/api/");
	options.links("http://d.android.com/reference/");
	options.footer('Copyright &#169; 2016&#8211;2017 Cisco System Inc.  All Rights Reserved.')
	exclude '**/BuildConfig.java'
	exclude '**/R.java'
	exclude '**/internal/*.java'
	exclude '**/utils/**'
	failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	classifier = 'javadoc'
	from javadoc.destinationDir
}
